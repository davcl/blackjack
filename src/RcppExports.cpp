// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// nextCardProbs
std::vector<double> nextCardProbs(std::vector<int> cards_remaining, int dealer_card);
RcppExport SEXP _blackjack_nextCardProbs(SEXP cards_remainingSEXP, SEXP dealer_cardSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type cards_remaining(cards_remainingSEXP);
    Rcpp::traits::input_parameter< int >::type dealer_card(dealer_cardSEXP);
    rcpp_result_gen = Rcpp::wrap(nextCardProbs(cards_remaining, dealer_card));
    return rcpp_result_gen;
END_RCPP
}
// dealer
std::vector<double> dealer(int dealer_total, std::vector<int> cards_remaining, bool is_ace, int hit_soft_17, bool is_first);
RcppExport SEXP _blackjack_dealer(SEXP dealer_totalSEXP, SEXP cards_remainingSEXP, SEXP is_aceSEXP, SEXP hit_soft_17SEXP, SEXP is_firstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type dealer_total(dealer_totalSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type cards_remaining(cards_remainingSEXP);
    Rcpp::traits::input_parameter< bool >::type is_ace(is_aceSEXP);
    Rcpp::traits::input_parameter< int >::type hit_soft_17(hit_soft_17SEXP);
    Rcpp::traits::input_parameter< bool >::type is_first(is_firstSEXP);
    rcpp_result_gen = Rcpp::wrap(dealer(dealer_total, cards_remaining, is_ace, hit_soft_17, is_first));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_blackjack_nextCardProbs", (DL_FUNC) &_blackjack_nextCardProbs, 2},
    {"_blackjack_dealer", (DL_FUNC) &_blackjack_dealer, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_blackjack(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
